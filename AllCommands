==========================vi====================================
Contr+V + : " '<,'>s/^/#/ "
=========================shell==================================
shell 
chsh -s /usr/bin/fish
export fish
=========================user|groups==============================
users
useradd -m newusername
passwd newusername
usermod -aG sudo newusername
groups
/etc/group
/etc/passwd
chgrp/chmod
groupadd -r
groupmod -g new_gid groupname
setfacl -m u:username:rw- /path/to/file.txt
=========================disk==============================
grep -r --include=\*.php 'name' /

iostat
du -xhdl /
df -h | awk '{print $1 $4}'
du -h | grep [0-9]G | sort -sh
lsblck
mount/unmount (mount -t ext4 /dev/sdb1 /home/dir)
findmnt --real
fdisk -l
blkid
lsof
dd
dd if=/dev/sdX of=/path/to/snapshot.img bs=4M
=========================another==============================
vi/touch/mkdir
tar -czvf archive.tar.gz file1 file2 directory1
cp/rm/mv
sudo sh -c 'echo ok && sudo -i'
less/tail -f/tail -1000/cat
pwd 
sudo dpkg -l *packedge_name*
find ~/. -name "name"
for i in cat ${} do; 
zip archive.zip file.txt
zip -r archive.zip directory/
zip -r -q archive.zip directory/
unzip archive.zip
=========================net==============================
ip a
netplan-for hardcoding wifi-conf
lshw
netstat -in / netstat -lptnu
ifconfig

ping/telnet/ssh/scp/curl/
traceroute

sftp -oPort=portID user@host
ftp user@host
nc -z -v [ip] 1-80 | grep open

nmap
nmap --open 192.168.1.0/24 --scan in local net

ss -tuln | grep "pornID"
netstat -tuln | grep "pornID"
nmcli - cheack all hosts on lan
nmtui - UI config
iwconfig
iwlist scanning
arp-scan --interface="enterface" --localnet  -ARP scan
dmesg | grep -i eth

wakeonlan MAC-ID
nslookup

journalctl | grep wlan0
journalctl | grep netplan
--------------------------link---------------------------------
ip link
ip link delete 
---------------------------ufw----------------------------------
ufw allow 80/tcp
ufw delete number_id
ufw reload
-------------------------iptables-------------------------------
iptables -L or iptables -L -n -v
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables-save
sudo apt-get install iptables-persistent
sudo netfilter-persistent save
=========================multiplex==============================
screen -ls 
screen -r
tmux
=========================subprocess============================
top/htop/uptime/radeontop/sensors

ps aux | grep -w Z
kill -HUP $(ps -A -ostat,ppid | awk '{/[zZ]/{ print $2 }')
kill -9
systemctl status | grep 'ERROR' / systemctl restart .service
(ACL)
getfacl
chmod/chown
which / rm $(which 'name')
=========================ansible============================
ad hoks
ansible hosts -m ping -a | grep pong
ansible hosts -a "/sbin/reboot"
ansible hosts -m shell -a “rm ‘var/log...’” -i hosts
=========================hdfs==============================
hdfs dfs -chmod/chown
hdfs dfs -cp
hdfs dfs -rm -R -skipTrash .../* 
hdfs dfs -du 
hdfs dfs -get/put
hdfs dfs -mkdir
hdfs dfs -mv
hadoop fs -df -h /
hadoop dfs -du -h / 
hdfs dfsadmin -setSpaceQuota 5 …/
Yarn application -kill
start/stop/restart ambari
========================docker=============================
docker ps
docker build -t "name" .
docker images
docker system df
docker rmi <id>
docker rm iamge "name:tag"
docker rm "container_id"
docker run -d -p port:port "container_id"
docker start/stop "container_id/ etc ids"
docker stats
docker ps -a
docker logs -f "container_id"

docker inspect --format='{{json .NetworkSettings.Networks}}' my-container
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-container/containerID

docker run --link anothercontainer:name
docker run --dns ip-container

docker network ls
docker exec -it <id> sh 
docker system prune -a
docker stop $(docker ps -q -a)
---
docker build --no-cache -t "nameservice" .
docker run -it --entrypoint /bin/sh "nameservice"
---
docker system prune -a -f && 
docker container prune -f && 
docker volume prune -a -f && 
docker builder prune -a -f
---
docker image prune -a -f
docker-compose logs -f
docker-compose up -d
docker-compose ps -a
docker-compose down
docker-compose --file docker-compose.yml --env-file /path/to/.env up
========================ipa================================
Ipa user-find “userIP”
ipa host-find 
Ipa host-show 
======================gitlab================================
gitlab-runner start/stop
----------------------update-runners------------------------
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash && 
apt-get update && 
apt-get install gitlab-runner
gitlab-backup create 
gitlab-ctl status

gitlab-rake gitlab:env:info
gitlab-rake gitlab:status
gitlab-rake gitlab:check
gitlab-ctl start
gitlab-ctl status
gitlab-ctl restart redis
gitlab-ctl reconfigure

gitlab-rake gitlab:doctor:secrets

gitlab-rails runner "puts Gitlab::Application.secrets.secret_key_base"
gitlab-rake gitlab:check SANITIZE=true
gitlab-rake gitlab:web_hook:logs

gitlab-rake db:migrate:status

sudo gitlab-rake db:migrate:status 

sudo gitlab-rake gitlab:background_migrations:execute

grep db_key_base /etc/gitlab/gitlab-secrets.json
grep secret_key_base /etc/gitlab/gitlab-secrets.json
gitlab-rails runner "puts Gitlab::CurrentSettings.current_application_settings.health_check_access_token"

gitlab-rails runner "WebHook.where(url: 'https://###/###').destroy_all"
======================git=================================
git stash
git rebase -i origin/"name branch"
git config --global --add safe.directory /path/directory/
======================ssh-keys================================
ssh -T git@github.com
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/
ssh-keygen -t rsa -b 4096 -C "mail" -f ~/.ssh/id_rsa_key_name_file
=========================certbot=============================
certbot certonly --webroot -w /var/www/html --force-renewal --email addres_mail -d web-server-domain --agree-tos
certbot certonly --force-renewal
certbot certonly --manual --preferred-challenges dns -d <dnsname>.ru -d *.<dnsname>.ru 
